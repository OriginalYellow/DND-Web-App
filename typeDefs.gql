type Query {
  getCurrentUser: User
}

type Mutation {
  signupUser(username: String!, email: String!, password: String!): Token
  signinUser(username: String!, password: String!): Token
}

type User {
  _id: ID
  username: String!
  email: String!
  password: String!
  joinDate: String
  playerCharacters: [PlayerCharacter]
}

type Token {
  token: String!
}

# game-related queries and input types:

extend type Query {
  playerCharacters: [PlayerCharacter]
}

# game-related mutations and input types:

extend type Mutation {
  createPlayerCharacter(name: String!): PlayerCharacter
  overrideAbilityScoreValue(abilityScore: overrideAbilityScoreInput!, value: Int!): PlayerCharacter
  overrideAbilityScoreProficiency(abilityScore: overrideAbilityScoreInput!, proficient: Boolean!): PlayerCharacter
  overrideSkillValue(skill: overrideSkillInput!, value: Int!): PlayerCharacter
  overrideSkillProficiency(skill: overrideSkillInput!, proficient: Boolean!): PlayerCharacter
}

input overrideAbilityScoreInput {
  playerCharacterId: ID!
  abilityScoreName: AbilityScoreName!
}

input overrideSkillInput {
  playerCharacterId: ID!
  skillName: SkillName!
}

# game-related reference types:

type AbilityScoreInfo {
  id: ID!
  name: AbilityScoreName!
  fullName: String!
  description: String!
  skills: [Skill!]!
}

type SkillInfo {
  id: ID!
  name: SkillName!
  description: String!
  abilityScore: [AbilityScoreInfo!]!
}

# game-related entity types:

type PlayerCharacter {
  name: String!
  abilityScores: AbilityScores!
  # skills: [Skill!]!
  skills: Skills!
  id: ID!
  createdBy: User!
}

type AbilityScores {
  str: AbilityScore!,
  dex: AbilityScore!,
  con: AbilityScore!,
  int: AbilityScore!,
  wis: AbilityScore!,
  cha: AbilityScore!,
}

type AbilityScore {
  name: AbilityScoreName!
  value: Int!
  proficient: Boolean!
  info: AbilityScoreInfo!
  bonusSources: [BonusSource]!
}

type Skills {
  acrobatics: Skill!
  animalHandling: Skill!
  arcana: Skill!
  athletics: Skill!
  deception: Skill!
  history: Skill!
  insight: Skill!
  intimidation: Skill!
  investigation: Skill!
  medicine: Skill!
  nature: Skill!
  perception: Skill!
  performance: Skill!
  persuasion: Skill!
  religion: Skill!
  slightOfHand: Skill!
  stealth: Skill!
  survival: Skill!
}

type Skill {
  name: SkillName!
  value: Int!
  proficient: Boolean!
  info: SkillInfo!
  bonusSources: [BonusSource]!
}

type BonusSource {
  explanation: String!
}

# game-related enums:

enum AbilityScoreName {
  STR
  DEX
  CON
  INT
  WIS
  CHA
}

enum SkillName {
  ACROBATICS
  ANIMAL_HANDLING
  ARCANA
  ATHLETICS
  DECEPTION
  HISTORY
  INSIGHT
  INTIMIDATION
  INVESTIGATION
  MEDICINE
  NATURE
  PERCEPTION
  PERFORMANCE
  PERSUASION
  RELIGION
  SLEIGHT_OF_HAND
  STEALTH
  SURVIVAL
}